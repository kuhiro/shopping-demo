
var Html     = require('html');
var Utils    = require('utilities');
var Data     = require('data');

var MinimumCategoryAndManufacturerCount = 12;

var CustomerName = process.env['CUSTOMER_NAME'];
if (!CustomerName) {
  console.error('SET ENVIRONMENT VARIABLE: "CUSTOMER_NAME"');
  process.exit(-1);
}

function create_json_response(d) {
  return {dynamic : d, text : [], html : [], script : []};
}

var CategoryProductSummaryLength = 35;
var ShortProductSummaryLength    = 35;
var ProductDetailLength          = 55;

function create_short_product_summary(pname, len) {
  var alen = (len - 4);
  if (pname.length <= alen) return pname;
  var beg  = pname.indexOf(" ") + 1; // remove BRAND
  var fin  = beg + alen;
  return pname.substring(beg, fin) + " ...";
}

function create_ajax_div(host, i, tname, uri) {
  var url   = Html.CreateLoadBalancedUrl(host, uri);
  var id    = tname + "-" + i + "-text";
  var html  = write_div(id, 0, 0, 0, "", false);
  html     += write_script("client_add_xml_request", [url, id]);
  return html;
}

function create_product_ajax_div(sid, host, tname, pid, num, i) {
  var uri  = 'show_product_summary?product_id=' + pid + '&short=true';
  if (sid) uri +=  '&session=' + sid;
  uri     += '&customer=' + CustomerName;
  return create_ajax_div(host, i, tname, uri);
}

function create_manufacturer_ajax_div(sid, host, xname, i) {
  var tname  = "manufacturers";
  var uri    = 'show_manufacturer_summary?name=' + xname;
  if (sid) uri +=  '&session=' + sid;
  uri      += '&customer=' + CustomerName;
  return create_ajax_div(host, i, tname, uri);
}

function create_category_ajax_div(sid, host, cname, i) {
  var tname  = "categories";
  var uri    = 'show_category_summary?name=' + cname;
  if (sid) uri +=  '&session=' + sid;
  uri      += '&customer=' + CustomerName;
  return create_ajax_div(host, i, tname, uri);
}

exports.CreateDuoManufacturerDiv = function(sid, host, xname, i) {
  var tname  = "manufacturer";
  var uri    = './show_manufacturer_summary?name=' + xname + '&duo=true';
  if (sid) uri +=  '&session=' + sid;
  uri      += '&customer=' + CustomerName;
  return create_ajax_div(host, i, tname, uri);
}

exports.CreateDuoCategoryDiv = function(sid, host, cname, i) {
  var tname  = "category";
  var uri    = './show_category_summary?name=' + cname + '&duo=true';
  if (sid) uri +=  '&session=' + sid;
  uri      += '&customer=' + CustomerName;
  return create_ajax_div(host, i, tname, uri);
}

function add_duo_json(sid, cname, duo, mini, cdata, lfunc, tname, uri, next) {
  var json = create_json_response(true);
  var cnt  = cdata.quantity;
  if (!duo) {
    var html = lfunc(sid, cname) + " PRODUCTS: " + cnt;
    json.html.push(html);
  } else {
    var html = '<table border="0"><tr><td width="250">' +
               "TOP DEALS: " + lfunc(sid, cname) + '</td><td>';
    var min  = MinimumCategoryAndManufacturerCount;
    for (var i = 0; i < 2; i++) {
      var num     = Math.floor(Math.random() * min) + 1;
      var url     = uri + "?name=" + cname + "&num=" + num + "&mini=" + mini;
      if (sid) url += "&session=" + sid;
      url        += '&customer=' + CustomerName;
      var id      = tname + "-" + cname + "-" + i + "-text";
      html       += write_div(id, 0, 30, 0, "", true);
      var script  = {id : id, url : url};
      json.script.push(script);
    }
    html += '</td></tr></table>';
    json.html.push(html);
  }
  var response = Html.CreateServerlessJsonResponse(200, json);
  next(null, response);
}

function get_duo_product(xname, num, gfunc, next) {
  gfunc(xname, null, function(gerr, xdata) {
    if (gerr) next(gerr, null);
    else {
      var products = xdata.products;
      var duopid   = null;
      var cnt      = 0;
      for (var pid in products) {
        if (cnt === num) {
          duopid = pid;
          break;
        }
        cnt++;
      }
      next(null, duopid);
    }
  });
}

function create_mini_product_summary(sid, pdata) {
  var pid   = pdata.id;
  var isrc  = pdata.image_src;
  var ihtml = '<img src="' + isrc + '" width=30 height=30' +
              ' style="vertical-align:middle"/>';
  var html  = '<span style="padding: 5px;">' +
                Html.ProductLink(sid, pid, ihtml) +
              '</span>' +
              ' $' + pdata.price;
  return html;
}

function create_duo_json(sid, duopid, next) {
  var json = create_json_response(true);
  exports.GetProductInfo(duopid, null, function(gerr, pdata) {
    if (gerr) next(gerr, null);
    else {
      var html     = create_mini_product_summary(sid, pdata);
      json.html.push(html);
      var response = Html.CreateServerlessJsonResponse(200, json);
      next(null, response);
    }
  });
}

function create_duo_mini_json(sid, tname, duopid, xname, num, next) {
  var json     = create_json_response(true);
  var url      = "./show_product_summary?product_id=" + duopid + "&mini=true";
  if (sid) url += "&session=" + sid;
  url         += '&customer=' + CustomerName;
  var id       = tname + "-" + xname + "-" + num + "-text";
  var html     = write_div(id, 0, 30, 0, "", true);
  json.html.push(html);
  var script   = {id : id, url : url};
  json.script.push(script);
  var response = Html.CreateServerlessJsonResponse(200, json);
  next(null, response);
}

function get_duo_json(sid, tname, xname, num, mini, gfunc, next) {
  get_duo_product(xname, num, gfunc, function(gerr, duopid) {
    if (gerr) next(gerr, null);
    else {
      if (mini) create_duo_mini_json(sid, tname, duopid, xname, num, next)
      else      create_duo_json     (sid, duopid, next)
    }
  });
}
function render_products(sid, host, tname, products, cols) {
  var html = "";
  if (products) {
    html  += '<table border="0">';
    var i  = 0;
    for (var pid in products) {
      var num   = products[pid];
      var even  = ((i % cols) === 0);
      if (even) {
        if (i) html += "</tr>";
        html += "<tr>";
      }
      html     += '<td width="400">';
      html     += create_product_ajax_div(sid, host, tname, pid, num, i);
      html     += "</td>"
      i++;
    }
    var even  = (((i - 1) % cols) === 0);
    if (even) html += "</tr>";
    html     += '</table>';
  }
  return html;
}

function render_purchase(sid, username, idata) {
  var pid   = idata.id;
  var ts    = idata.ts;
  var items = idata.items;
  var html  = Html.Line("PURCHASE-ID: " + pid + " TS: " + ts, 1);
  for (var i = 0; i < items.length; i++) {
    var item   = items[i];
    var pid    = item.id;
    var pname  = Utils.SafeDecode(item.name);
    pname      = create_short_product_summary(pname, ShortProductSummaryLength);
    var ihtml  = '<img src="' + item.image_src + '" width=30 height=30' +
                 ' style="vertical-align:middle"/>';
    var isrc   = Html.ProductLink(sid, pid, ihtml);
    html      += '<span style="padding: 5px 20px;">&nbsp</span>' + isrc +
                 '<span style="padding: 5px 20px;">'             +
                   Html.ProductLink(sid, pid, pname)             +
                 '</span><br/>';
  }
  return html;
}

function create_purchases_ajax_divs(sid, tname, purchases) {
  var html = "";
  var json = create_json_response(false);
  json.text.push("PURCHASES:");
  for (var i = 0; i < purchases.length; i++) {
    var p       = purchases[i];
    var url     = './show_purchase?id=' + p.id;
    if (sid) url += '&session=' + sid;
    url        += '&customer=' + CustomerName;
    var id      = tname + "-" + i + "-text";
    var script  = {id : id, url : url};
    json.script.push(script);
  }
  var response  = {body : JSON.stringify(json)};
  html         += exports.JsonResult(response, "purchases", 800, 0, 0, 20, 40);
  return html;
}

function get_manufacturer_info(xname, xdata, next) {
  if (xdata) next(null, xdata);
  else {
    var tname  = 'manufacturers';
    var params = {TableName : tname,
                  Key       : {name : Utils.SafeEncode(xname)}};
    Data.get(params, function(gerr, data) {
      if (gerr) next(gerr, null);
      else      next(null, data.Item);
    });
  }
}

function get_category_info(cname, cdata, next) {
  if (cdata) next(null, cdata);
  else {
    var tname  = 'categories';
    var params = {TableName : tname,
                  Key       : {name : Utils.SafeEncode(cname)}};
    Data.get(params, function(gerr, data) {
      if (gerr) next(gerr, null);
      else      next(null, data.Item);
    });
  }
}

exports.GetProductInfo = function(pid, pdata, next) {
  if (pdata) next(null, pdata);
  else {
    var tname  = 'products';
    var params = {TableName : tname,
                  Key       : {id : pid}};
    Data.get(params, function(gerr, data) {
      if (gerr) next(gerr, null);
      else      next(null, data.Item);
    });
  }
}

function render_user_datastructure(sid, host, json, username, tname, fname,
                                   isarr, max, next) {
  var params  = {TableName : tname,
                 Key       : {username : username}};
  Data.get(params, function(gerr, data) {
    if (gerr) next(gerr, null);
    else {
      if (data.Item) {
        var d   = data.Item[fname];
        var cnt = 0;
        if (isarr) {
          for (var i = 0; i < d.length; i++) {
            var pdata = d[i];
            var pid   = pdata.id;
            Html.AddProductSummaryScript(sid, host, json, tname, cnt, pid);
            cnt++;
            if (cnt === max) break;
          }
        } else {
          for (var pid in d) {
            Html.AddProductSummaryScript(sid, host, json, tname, cnt, pid);
            cnt++;
            if (cnt === max) break;
          }
        }
      }
      var response = Html.CreateServerlessJsonResponse(200, json);
      next(null, response);
    }
  });
}

function render_recently_viewed(sid, host, json, username, next) {
  var tname = "recently_viewed";
  var fname = "values";
  var max   = 3;
  render_user_datastructure(sid, host, json, username, tname, fname,
                            true, max, next);
}

function render_favorites(sid, host, json, username, next) {
  var tname = "favorites";
  var fname = "values";
  var max   = 3;
  render_user_datastructure(sid, host, json, username, tname, fname,
                            false, max, next);
}

function render_recommended(sid, host, json, username, next) {
  var tname = "recommended";
  var fname = "values";
  var max   = 3;
  render_user_datastructure(sid, host, json, username, tname, fname,
                            true, max, next);
}

function render_cart(sid, host, json, username, next) {
  var tname = "cart";
  var fname = "values";
  var max   = 3;
  render_user_datastructure(sid, host, json, username, tname, fname,
                            false, max, next);
}

function render_top_sellers(sid, host, json, next) {
  var tname  = "globals";
  var fname  = "top_sellers";
  var params = {TableName : tname,
                Key       : {key : fname}};
  Data.get(params, function(gerr, data) {
    if (gerr) next(gerr, null);
    else {
      var tdata = data.Item;
      if (tdata) {
        Utils.DeleteKeyField(tdata);
        var cnt = 0;
        var max = 4;
        for (var nname in tdata) {
          var pid = nname.substring("product_".length);
          Html.AddProductSummaryScript(sid, host, json, fname, cnt, pid);
          cnt++;
          if (cnt === max) break;
        }
      }
      var response = Html.CreateServerlessJsonResponse(200, json);
      next(null, response);
    }
  });
}

function create_product_comments(sid, username, pid, entries) {
  var html = "";
  for (var i = 0; i < entries.length; i++) {
    var c    = entries[i];
    var u    = c.username;
    var txt  = c.text;
    html    += Html.Tab(1) + "USER: (" + u + ") COMMENT: (" + txt + ")<br/>";
  }
  return html;
}

function write_hidden_input(name, val) {
  var h = '<input type="hidden" name="' + name + '" value="' + val +'" >';
  return h;
}

function create_add_comment(sid, username, pid) {
  var url = './add_comment';
  var h = '<form action="' + url + '" method="get">'     +
          write_hidden_input("username",   username)     +
          write_hidden_input("session",    sid)          +
          write_hidden_input("product_id", pid)          +
          write_hidden_input("customer",   CustomerName) +
          `<table cellpadding=4><tr>
           <td><label for="add_comment">YOUR COMMENT</label></td>
           <td><input type="text" id="add_comment" name="comment" size=40></td>
           <td><button type="submit">ADD</button></td>
           </tr></table></form>`;
  return h;
}

function render_product_comments(sid, host, json, username, pid, next) {
  var tname  = "comments";
  var params = {TableName : tname,
                Key       : {productid : pid}};
  Data.get(params, function(gerr, data) {
    if (gerr) next(gerr, null);
    else {
      var cdata = data.Item;
      if (!cdata) {
        json.html.push(Html.Tab(1) + "NO COMMENTS YET");
      } else {
        var entries = cdata.entries;
        json.html.push(create_product_comments(sid, username, pid, entries));
      }
      json.html.push(create_add_comment(sid, username, pid));
      var response = Html.CreateServerlessJsonResponse(200, json);
      next(null, response);
    }
  });
}

exports.Guest = function(next) {
  var html     = Html.Line("WELCOME GUEST");
  var response = Html.CreateServerlessHtmlResponse(200, html);
  next(null, response);
}

exports.MemberInfoJson = function(sid, username, next) {
  var json = create_json_response(false);
  json.text.push("WELCOME USER: " + username);
  json.text.push("SESSION: " + sid);
  var response = Html.CreateServerlessJsonResponse(200, json);
  next(null, response);
}

exports.TopSellersJson = function(sid, host, next) {
  var json = create_json_response(false);
  json.text.push("TOP SELLERS:");
  render_top_sellers(sid, host, json, next);
}

exports.RecentlyViewedJson = function(sid, host, username, next) {
  var json = create_json_response(false);
  json.text.push("RECENTLY VIEWED:");
  render_recently_viewed(sid, host, json, username, next);
};

exports.FavoritesJson = function(sid, host, username, next) {
  var json = create_json_response(false);
  json.text.push("FAVORITES:");
  render_favorites(sid, host, json, username, next);
}

exports.RecommendedJson = function(sid, host, username, next) {
  var json = create_json_response(false);
  json.text.push("RECOMMENDED:");
  render_recommended(sid, host, json, username, next);
}

exports.CartJson = function(sid, host, username, next) {
  var json = create_json_response(true);
  json.html.push("CART:<br/>" +
                 Html.Tab(1) + Html.BuyCartLink (sid, "BUY CART"));
  render_cart(sid, host, json, username, next);
}

exports.BuyCart = function(sid, username, idata, next) {
  var html     = Html.Line("WELCOME USER: " + username) +
                 Html.Line("PURCHASED:", 1) +
                 render_purchase(sid, username, idata);
  var response = Html.CreateServerlessHtmlResponse(200, html);
  next(null, response);
}

exports.ShowProductCommentsJson = function(sid, host, username, pid, next) {
  var json = create_json_response(true);
  json.html.push("COMMENTS:<br/>");
  render_product_comments(sid, host, json, username, pid, next);
}

function get_map_to_array(tname, fname, next) {
  var res    = [];
  var params = {TableName : tname,
                Key       : {key : fname}};
  Data.get(params, function(gerr, data) {
    if (gerr) next(gerr, null);
    else {
      var ms = data.Item;
      if (!ms) next(null, res);
      else {
        Utils.DeleteKeyField(ms);
        for (var name in ms) {
          var num = ms[name];
          if (num) res.push({name : name, num : num});
        }
        next(null, res);
      }
    }
  });
}

function get_manufacturers_info(next) {
  var tname = "globals";
  var fname = "manufacturers";
  get_map_to_array(tname, fname, next);
}

function get_categories_info(next) {
  var tname = "globals";
  var fname = "categories";
  get_map_to_array(tname, fname, next);
}

exports.Manufacturer = function(sid, host, xname, xdata, next) {
  get_manufacturer_info(xname, xdata, function(gerr, xdata) {
    if (gerr) next(gerr, null);
    else {
      var html = "";
      if (xdata) {
        var xname  = Utils.SafeDecode(xdata.name);
        html      += Html.Line("NAME: "        + xname, 1) +
                     Html.Line("PRODUCTS:    " + xdata.quantity, 1) +
                     render_products(sid, host, xname, xdata.products, 3);
      }
      var response = Html.CreateServerlessHtmlResponse(200, html);
      next(null, response);
    }
  });
}

exports.DuoManufacturerJson = function(sid, xname, num, mini, next) {
  var tname = "duo_manufacturer_mini";
  var gfunc = get_manufacturer_info;
  get_duo_json(sid, tname, xname, num, mini, gfunc, next);
}

function add_duo_manufacturer_json(sid, xname, duo, mini, xdata, next) {
  var lfunc = Html.ManufacturerLink;
  var tname = "duo_manufacturer";
  var uri   = "./show_duo_manufacturer";
  add_duo_json(sid, xname, duo, mini, xdata, lfunc, tname, uri, next);
}

exports.ManufacturerSummaryJson = function(sid, xname, duo, mini, next) {
  get_manufacturer_info(xname, null, function(gerr, xdata) {
    if (gerr) next(gerr, null);
    else {
      add_duo_manufacturer_json(sid, xname, duo, mini, xdata, next);
    }
  });
}

exports.ManufacturersData = function(sid, host, next) {
  var html  = Html.Line("BRANDS:");
  html     += '<table border="0">';
  get_manufacturers_info(function(gerr, res) {
    if (gerr) next(gerr, null);
    else {
      for (var i = 0; i < res.length; i++) {
        var even   = ((i % 2) === 0);
        if (even) html += "<tr>";
        html      += '<td width="300">';
        var r      = res[i];
        var xname  = Utils.SafeDecode(r.name);
        html      += create_manufacturer_ajax_div(sid, host, xname, i);
        html      += "</td>"
        if (!even) html += "</tr>";
      }
      var even      = (((res.length - 1) % 2) === 0);
      if (even) html += "</tr>";
      html         += '</table>';
      var response = Html.CreateServerlessHtmlResponse(200, html);
      next(null, response);
    }
  });
}

exports.Category = function(sid, host, cname, cdata, next) {
  get_category_info(cname, cdata, function(gerr, cdata) {
    if (gerr) next(gerr, null);
    else {
      var html = "";
      if (cdata) {
        var cname  = Utils.SafeDecode(cdata.name);
        html      += Html.Line("NAME: "        + cname, 1) +
                     Html.Line("PRODUCTS:    " + cdata.quantity, 1) +
                     render_products(sid, host, cname, cdata.products, 3);
      }
      var response = Html.CreateServerlessHtmlResponse(200, html);
      next(null, response);
    }
  });
}

exports.DuoCategoryJson = function(sid, cname, num, mini, next) {
  var tname = "duo_category_mini";
  var gfunc = get_category_info;
  get_duo_json(sid, tname, cname, num, mini, gfunc, next);
}

function add_duo_category_json(sid, cname, duo, mini, cdata, next) {
  var lfunc = Html.CategoryLink;
  var tname = "duo_category";
  var uri   = "./show_duo_category";
  add_duo_json(sid, cname, duo, mini, cdata, lfunc, tname, uri, next);
}

exports.CategorySummaryJson = function(sid, cname, duo, mini, next) {
  var json = create_json_response(true);
  get_category_info(cname, null, function(gerr, cdata) {
    if (gerr) next(gerr, null);
    else {
      add_duo_category_json(sid, cname, duo, mini, cdata, next);
    }
  });
}

exports.CategoriesData = function(sid, host, next) {
  var html  = Html.Line("CATEGORIES:");
  html     += '<table border="0">';
  get_categories_info(function(gerr, res) {
    if (gerr) next(gerr, null);
    else {
      for (var i = 0; i < res.length; i++) {
        var even   = ((i % 2) === 0);
        if (even) html += "<tr>";
        html      += '<td width="300">';
        var r      = res[i];
        var cname  = Utils.SafeDecode(r.name);
        html      += create_category_ajax_div(sid, host, cname, i);
        html      += "</td>"
        if (!even) html += "</tr>";
      }
      var even      = (((res.length - 1) % 2) === 0);
      if (even) html += "</tr>";
      html         += '</table>';
      var response = Html.CreateServerlessHtmlResponse(200, html);
      next(null, response);
    }
  });
}

function show_product_personalization(sid, html, username, pid, touch, next) {
  if (username) {
    if (touch) {
      var url  = './touch_product?product_id=' + pid;
      if (sid) url += '&session=' + sid;
      url     += '&customer=' + CustomerName;
      html    += add_lazy_script_load(url, 500);
    }
  }
  var response = Html.CreateServerlessHtmlResponse(200, html);
  next(null, response);
}

function create_rating_html(sid, pid) {
  var rsrc = "";
  for (var i = 0; i < 5; i++) {
    var sval  = i + 1;
    rsrc     += Html.RateProductLink(sid, pid, sval, "&star;") + "&nbsp;";
  }
  return rsrc;
}

exports.Product = function(sid, username, pid, pdata, touch, next) {
  exports.GetProductInfo(pid, pdata, function(gerr, pdata) {
    if (gerr) next(gerr, null);
    else {
      if (!pdata) {
        console.log('MISSING PRODUCT: ' + pid);
        var response = Html.CreateServerlessHtmlResponse(200, "");
        next(null, response);
      } else {
        var pid    = pdata.id;
        var pname  = Utils.SafeDecode(pdata.name);
        var cname  = Utils.SafeDecode(pdata.category);
        var clink  = Html.CategoryLink(sid, cname);
        var xname  = Utils.SafeDecode(pdata.manufacturer);
        var rcnt   = pdata.rate_count;
        var rval   = rcnt ? (pdata.rate_total / rcnt) : 0;
        var rate   = rval.toFixed(1); // [0.0 - 5.0]
        var rsrc   = create_rating_html(sid, pid);
        var xlink  = Html.ManufacturerLink(sid, xname);
        var name   = Utils.SafeDecode(pname);
        pname      = create_short_product_summary(pname, ProductDetailLength);
        var blink  = Html.BuyProductLink (sid, pid, "One Click Purchase");
        var calink = Html.EditCartLink   (sid, pid, "Add to Cart");
        var flink  = Html.AddFavoriteLink(sid, pid, "Add to favorites");
        var ihtml  = '<img src="' + pdata.image_src + '" width=200 height=200' +
                     ' style="vertical-align:middle"/>';
        var isrc   = Html.ProductLink(sid, pid, ihtml);
        var html   = '<table width="750" style="border: 1px solid black;">' +
                     '<tr>' +
                     '<td width="500" valign="middle">' +
                     Html.Line("NAME: "      + pname) +
                     Html.Line("CATEGORY: "  + clink) +
                     Html.Line("BRAND: "     + xlink) +
                     Html.Line("PRICE: "     + pdata.price) +
                     Html.Line("QUANTITY: "  + pdata.quantity) +
                     Html.Line("RATING: "    + rate) +
                     Html.Line("RATE: "      + rsrc) +
                     Html.Line(blink)  +
                     Html.Line(calink) +
                     Html.Line(flink)  +
                     "</td>" +
                     '<td width="250">' + isrc + '<br/>' + '</td>' +
                     '</tr>' +
                     '</table>' +
                     '<p/>';
        show_product_personalization(sid, html, username, pid, touch, next);
      }
    }
  });
}

exports.PurchaseJson = function(sid, host, username, pid, next) {
  var json    = create_json_response(true);
  var tname   = 'purchases';
  var params  = {TableName : tname,
                 Key       : {username : username}};
  Data.get(params, function(gerr, data) {
    if (gerr) next(gerr, null);
    else {
      var rdata = data.Item;
      if (rdata) {
        var purchases = rdata.orders;
        for (var i = 0; i < purchases.length; i++) {
          var p = purchases[i];
          if (pid === p.id) {
            var html = render_purchase(sid, username, p);
            json.html.push(html);
            break;
          }
        }
      }
      var response = Html.CreateServerlessJsonResponse(200, json);
      next(null, response);
    }
  });
}

exports.Purchases = function(sid, username, next) {
  var html    = "";
  var tname   = 'purchases';
  var params  = {TableName : tname,
                 Key       : {username : username}};
  Data.get(params, function(gerr, data) {
    if (gerr) next(gerr, null);
    else {
      var rdata = data.Item;
      if (rdata) {
        var purchases  = rdata.orders;
        html          += create_purchases_ajax_divs(sid, tname, purchases);
      }
      var response = Html.CreateServerlessHtmlResponse(200, html);
      next(null, response);
    }
  });
}


function get_no_repeat_random(res, pi) {
  var i = Math.floor(Math.random() * res.length);
  if (i === pi) {
    if (pi === res.length) i = 0;
    else                   i++;
  }
  return i;
}

exports.TopManufacturersJson = function(sid, mini, next) {
  var json = create_json_response(false);
  json.text.push("TOP BRANDS:");
  get_manufacturers_info(function(gerr, res) {
    if (gerr) next(gerr, null);
    else {
      var tname = "top_manufacturers";
      var num   = 2;
      var pi    = -1;
      for (var j = 0; j < num; j++) {
        var i       = get_no_repeat_random(res, pi);
        pi          = i;
        var r       = res[i];
        var xname   = Utils.SafeDecode(r.name);
        var url     = './show_manufacturer_summary?name=' + xname +
                      '&duo=true&mini=' + mini;
        if (sid) url += '&session=' + sid;
        url        += '&customer=' + CustomerName;
        var id      = tname + "-" + j + "-text";
        var script  = {id : id, url : url};
        json.script.push(script);
      }
      var response = Html.CreateServerlessJsonResponse(200, json);
      next(null, response);
    }
  });
}

exports.TopCategoriesJson = function(sid, mini, next) {
  var json = create_json_response(false);
  json.text.push("TOP CATEGORIES:");
  get_categories_info(function(gerr, res) {
    if (gerr) next(gerr, null);
    else {
      var tname = "top_categories";
      var num   = 2;
      var pi    = -1;
      for (var j = 0; j < num; j++) {
        var i       = get_no_repeat_random(res, pi);
        pi          = i;
        var r       = res[i];
        var xname   = Utils.SafeDecode(r.name);
        var url     = './show_category_summary?name=' + xname +
                      '&duo=true&mini=' + mini;
        if (sid) url += '&session=' + sid;
        url        += '&customer=' + CustomerName;
        var id      = tname + "-" + j + "-text";
        var script  = {id : id, url : url};
        json.script.push(script);
      }
      var response = Html.CreateServerlessJsonResponse(200, json);
      next(null, response);
    }
  });
}

function create_product_summary(sid, short, show, pdata) {
  var pid   = pdata.id;
  var pname = Utils.SafeDecode(pdata.name);
  if (short) {
    pname = create_short_product_summary(pname, ShortProductSummaryLength);
  }
  var ihtml = '<img src="' + pdata.image_src + '" width=30 height=30' +
              ' style="vertical-align:middle"/>';
  var isrc  = Html.ProductLink(sid, pid, ihtml);
  var html  = (show ? "" : isrc) +
              '<span style="padding: 5px 20px;">' +
                Html.ProductLink(sid, pid, pname) + ' $' + pdata.price +
              '</span>';
  return html;
}

exports.ProductSummaryJson = function(sid, short, show, mini, pdata, next) {
  var json     = create_json_response(true);
  var html     =  mini ? create_mini_product_summary(sid, pdata) :
                         create_product_summary(sid, short, show, pdata);
  json.html.push(html);
  var response = Html.CreateServerlessJsonResponse(200, json);
  next(null, response);
}

exports.TouchProductJson = function(sid, username, pid, next) {
  var json     = create_json_response(false);
  var response = Html.CreateServerlessJsonResponse(200, json);
  next(null, response);
}

function add_lazy_script_load(url, sleep) {
  var html = '<script>' +
             '  setTimeout(function() {' +
             '    var oReq = new XMLHttpRequest();' +
             '    oReq.open("GET", "' + url + '");' +
             '    oReq.send();' +
             '  },' + sleep + ');' +
             '</script>';
  return html;
}

function write_div(id, w, h, clm, html, inline) {
  var width  = w      ? 'width:'       + w   + ';' : '';
  var height = h      ? 'height:'      + h   + ';' : '';
  var leftm  = clm    ? 'margin-left:' + clm + ';' : '';
  var disp   = inline ? 'display: inline;'         : '';
  var html = '<div id="' + id + '"' +
                 ' style="' + width + height + leftm + disp + '"' +
             '>' + html + '</div>\n';
  return html;
}

function write_script(func, args) {
  var html = '<script>' + func + '(';
  for (var i = 0; i < args.length; i++) {
    var arg = args[i];
    if (typeof(arg) === "string") html += '"' + arg + '"';
    else                          html += arg;
    if (i !== (args.length - 1))  html += ',';
  }
  html += ');</script>\n';
  return html;
}

function parse_json_div_content(json) {
  if (json.dynamic) {
    var htmls = json.html;
    var html  = htmls.join('');
    return html;
  } else {
    var lines = json.text;
    var txt   = '';
    for (var i = 0; i < lines.length; i++) {
      var line  = lines[i];
      txt      += line;
      if (i !== (lines.length -1)) txt += "<br/>";
    }
    return txt;
  }
}

exports.JsonResult = function(response, name, w, th, ch, clm, gclm) {
  var json;
  try {
    json = JSON.parse(response.body);
  } catch (e) {
    console.error("ERROR: Render.JsonResult: JSON.Parse(): " + response.body);
    return "";
  }
  var txt     = parse_json_div_content(json);
  var html    = write_div(name, w, th, clm, txt, false);
  var scripts = json.script;
  for (var i = 0; i < scripts.length; i++) {
    var script  = scripts[i];
    var sid     = script.id;
    var surl    = script.url;
    var id      = name + "-" + i + "-text";
    html       += write_div(id, w, ch, gclm, "", false);
    html       += write_script("client_add_xml_request", [surl, sid]);
  }
  return html;
}

