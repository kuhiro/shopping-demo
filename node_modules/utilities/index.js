
var Response = require('response');
var Render   = require('render');
var Html     = require('html');
var Errors   = require('errors');
var Data     = require('data');

exports.Clone = function(o) {
  if (!o) return o;
  else    return JSON.parse(JSON.stringify(o));
}

exports.Log = function(x) {
  var text = JSON.stringify(x, null, "    ") + "\n";
  console.log(text);
}

exports.GetTime = function() {
  return Date.now();
}

exports.DeleteKeyField = function(ms) {
  delete(ms._id); // DATANET
  delete(ms.key); // DYNAMODB
}

exports.GetUrlParam = function(event, fname) {
  if (!event.queryStringParameters) return null;
  else                              return event.queryStringParameters[fname];
}

exports.DecodeUri = function(event, fname) {
  var val = exports.GetUrlParam(event, fname);
  if (!val) return null;
  else      return decodeURIComponent(val);
}

exports.Number = function(event, fname) {
  var val = exports.GetUrlParam(event, fname);
  if (!val) return 0;
  else      return Number(val);
}

exports.GetUrlBooleanParam = function(event, fname) {
  var val = exports.GetUrlParam(event, fname);
  if (!val) return false;
  else      return (val === "true");
}

exports.SafeEncode = function(val) {
  return encodeURIComponent(val).replace(/\./g, '%2E');
}

exports.SafeDecode = function(val) {
  return decodeURIComponent(val);
}

exports.EventCheckUsernamePassword = function(event, next) {
  var username = exports.GetUrlParam(event, 'username');
  var password = exports.GetUrlParam(event, 'password');
  if (!username || !password) {
    next(new Error(Errors.Message.AuthenticationMissing), null, null);
  } else {
    next(null, username, password);
  }
}

exports.CheckTimestampRedirect = function(event) {
  if (exports.GetUrlParam(event, 'ts')) return null;
  else {
    var html = Html.IncludeAjaxScripts() +
               '<script>client_redirect_with_timestamp();</script>';
    var response = Html.CreateServerlessHtmlResponse(200, html);
    return response;
  }
}

var TestSession = true;

exports.CreateSessionID = function(username, next) {
  var sid;
  if (!TestSession) {
    sid = "SID-" + Math.floor(Math.random() * Number.MAX_SAFE_INTEGER);
  } else {
    sid = "SID-" + username;
  }
  var tname   = "sessions";
  var params  = {TableName : tname,
                 Item      : {id : sid, username : username}};
  Data.put(params, function(serr, sres) {
    next(serr, sid);
  });
}

exports.ValidateSessionID = function(sid, next) {
  if (!sid) next(null, null);
  else {
    var tname  = "sessions";
    var params = {TableName : tname,
                  Key       : {id : sid}};
    Data.get(params, function(gerr, sdata) {
      if (gerr) next(gerr, null);
      else {
        if (!sdata.Item) next(null, null);
        else             next(null, sdata.Item.username);
      }
    });
  }
}

function add_to_top_sellers(username, pdata, next) {
  var tname   = "globals";
  var fname   = "top_sellers";
  var pid     = pdata.id;
  var nname   = "product_" + pid;
  var updates = [];
  updates.push({operation : "SET", values : [nname, 1]});
  var params  = {TableName : tname,
                 Key       : {key : exports.SafeEncode(fname)},
                 Updates   : updates};
  Data.update(params, next);
}

function remove_from_top_sellers(username, pdata, next) {
  return next(new Error(Errors.Message.NotImplemented), null);
}

function modify_user_datastructure(username, pdata, tname, fname,
                                   isarr, msize, isadd, next) {
  var pid    = pdata.id;
  var params = {TableName : tname,
                Key       : {username : username}};
  Data.get(params, function(gerr, data) {
    if (gerr) next(gerr, null);
    else {
      if (isadd) { // ADD
        if (!data.Item) data = {Item : {username : username}};
        if (isarr) {   // ADD TO ARRAY
          if (!data.Item[fname]) data.Item[fname] = [];
          data.Item[fname].unshift(pdata);
          if (data.Item[fname].length > msize) {
            data.Item[fname].splice(msize, 1);
          }
        } else {       // ADD TO DICTIONARY
          if (!data.Item[fname]) data.Item[fname] = {};
          data.Item[fname][pid] = pdata;
        }
      } else {     // REMOVE
        if (data.Item && data.Item[fname]) {
          if (isarr) { // REMOVE FROM ARRAY
            return next(new Error(Errors.Message.NotImplemented), null);
          } else {     // REMOVE FROM DICTIONARY
            delete(data.Item[fname][pid]);
          }
        }
      }
      var params = {TableName   : tname,
                    Item        : data.Item};
      Data.put(params, next); // NOT UPDATE -> COMPLEX DATA TYPE
    }
  });
}

function add_to_user_datastructure(username, pdata, tname, fname,
                                   isarr, msize, next) {
  modify_user_datastructure(username, pdata, tname, fname, isarr, msize,
                            true, next);
}

function remove_from_user_datastructure(username, pdata, tname, fname,
                                        isarr, msize, next) {
  modify_user_datastructure(username, pdata, tname, fname, isarr, msize,
                            false, next);
}

exports.AddToRecentlyViewed = function(username, pdata, next) {
  var tname = "recently_viewed";
  var fname = "values";
  var msize = 3;
  add_to_user_datastructure(username, pdata, tname, fname, true, msize, next);
}

function add_to_favorites(username, pdata, next) {
  var tname = "favorites";
  var fname = 'values';
  add_to_user_datastructure(username, pdata, tname, fname, false, 0, next);
}

function remove_from_favorites(username, pdata, next) {
  var tname = "favorites";
  var fname = "values";
  remove_from_user_datastructure(username, pdata, tname, fname, false, 0, next);
}

function add_to_cart(username, pdata, next) {
  var tname = "cart";
  var fname = 'values';
  add_to_user_datastructure(username, pdata, tname, fname, false, 0, next);
}

function remove_from_cart(username, pdata, next) {
  var tname = "cart";
  var fname = "values";
  remove_from_user_datastructure(username, pdata, tname, fname, false, 0, next);
}

function do_edit_metric(sid, host, ts, is_fav, is_cart, username, pid, is_add,
                        next) {
  exports.CheckProduct(pid, function(cerr, pdata) {
    if (cerr) next(cerr, null);
    else {
      var action;
      if (is_fav) {
        action = (is_add) ? add_to_favorites   : remove_from_favorites;
      } else if (is_cart) {
        action = (is_add) ? add_to_cart        : remove_from_cart;
      } else { // TOP-SELLER
        action = (is_add) ? add_to_top_sellers : remove_from_top_sellers;
      }
      action(username, pdata, function(aerr, ares) {
        if (aerr) next(aerr, null);
        else {
          var member = is_fav || is_cart;
          if (!member)  Response.GuestHome(sid, host, ts, next);
          else {
            var touch = false;
            Response.ShowProduct(sid, host, ts, username, pdata.id, pdata,
                                 touch, next);
          }
        }
      });
    }
  });
}

exports.EditMemberMetric = function(event, is_fav, is_cart, next) {
  var sid = exports.GetUrlParam(event, 'session');
  exports.ValidateSessionID(sid, function(verr, username) {
    if (verr) next(verr, null);
    else {
      if (!username) next(new Error(Errors.Message.Authentication), null);
      else {
        var host   = event.headers.Host;
        var ts     = exports.GetUrlParam(event, 'ts');
        var pid    = exports.GetUrlParam(event, 'product_id');
        var is_add = exports.GetUrlBooleanParam(event, 'add');
        do_edit_metric(sid, host, ts, is_fav, is_cart, username, pid, is_add,
                       next);
      }
    }
  });
}

exports.GetProductsInfo = function(next) {
  var tname   = "globals";
  var fname   = "products";
  var params  = {TableName : tname,
                 Key       : {key : fname}};
  Data.get(params, function(gerr, data) {
    if (gerr) next(gerr, null);
    else {
      if (!data.Item) next(null, null);
      else {
        var ps = data.Item;
        exports.DeleteKeyField(ps);
        var tpid = ps.top_product_id;
        next(null, tpid);
      }
    }
  });
}

function get_random_product_id(next) {
  exports.GetProductsInfo(function(gerr, tpid) {
    if (gerr) next(gerr, null);
    else {
      var pid = String(Math.floor(Math.random() * tpid));
      next(null, pid);
    }
  });
}

exports.AddToRecommended = function(username, next) {
  get_random_product_id(function(gerr, pid) {
    if (gerr) next(gerr, null);
    else {
      if (!pid) next(null, null);
      else {
        Render.GetProductInfo(pid, null, function(gerr, pdata) {
          if (gerr) next(gerr, null);
          else {
            var tname = "recommended";
            var fname = "values";
            var msize = 4;
            add_to_user_datastructure(username, pdata, tname, fname,
                                      true, msize, next);
          }
        });
      }
    }
  });
}

function reduce_quantity(tname, kname, pid, next) {
  var updates = [];
  var num     = -1;
  var fname   = "products";
  var qfname  = fname + "." + pid;
  updates.push({operation : "INCREMENT", values : [qfname,     num]});
  updates.push({operation : "INCREMENT", values : ["quantity", num]});
  var params  = {TableName : tname,
                 Key       : {name : exports.SafeEncode(kname)},
                 Updates   : updates};
  Data.update(params, next);
}

function reduce_category_products_quantity(cname, pid, next) {
  var tname = 'categories';
  reduce_quantity(tname, cname, pid, next);
}

function reduce_manufacturer_products_quantity(xname, pid, next) {
  var tname = 'manufacturers';
  reduce_quantity(tname, xname, pid, next);
}

function reduce_product_quantity(pid, next) {
  var tname  = 'products';
  var params = {TableName : tname,
                Key       : {id : pid}};
  Data.get(params, function(gerr, data) {
    if (gerr) next(gerr, null);
    else {
      var pdata   = data.Item;
      var cname   = pdata.category;
      var xname   = pdata.manufacturer;
      var updates = [];
      updates.push({operation : "INCREMENT", values : ["quantity", -1]});
      var params  = {TableName : tname,
                     Key       : {id : pid},
                     Updates   : updates};
      Data.update(params, function(serr, sres) {
        if (serr) next(serr, null);
        else {
          reduce_category_products_quantity(cname, pid, function(serr, sres) {
            if (serr) next(serr, null);
            else {
              reduce_manufacturer_products_quantity(xname, pid, next);
            }
          });
        }
      });
    }
  });
}

function buy_items(username, items, next) {
  if (items.length === 0) next(null, null);
  else {
    var pdata = items.shift();
    var pid   = pdata.id;
    reduce_product_quantity(pid, function(serr, sres) {
      if (serr) next(serr, null);
      else      setImmediate(buy_items, username, items, next);
    });
  }
}

function get_next_purchase_id(next) {
  var tname  = "globals";
  var fname  = "next_purchase_id";
  var params = {TableName : tname,
                Key       : {key : fname}};
  Data.get(params, function(gerr, data) {
    if (gerr) next(gerr, null);
    else {
      var ndata       = data.Item;
      var purchase_id = ndata ? (ndata.id + 1) : 1;
      var op          = ndata ? "INCREMENT"    : "SET";
      var updates     = [];
      updates.push({operation : op, values : ["id", 1]});
      var params      = {TableName : tname,
                         Key       : {key : fname},
                         Updates   : updates};
      Data.update(params, function(serr, sres) {
        next(serr, purchase_id);
      });
    }
  });
}

function add_items_to_purchase(username, items, next) {
  get_next_purchase_id(function(gerr, purchase_id) {
    if (gerr) next(gerr, null);
    else {
      var tname   = 'purchases';
      var idata   = {id       : purchase_id,
                     ts       : exports.GetTime(),
                     items    : exports.Clone(items)};
      var updates = [];
      updates.push({operation : "INSERT", values : ["orders", 0, idata]});
      var params  = {TableName : tname,
                     Key       : {username : username},
                     Updates   : updates};
      Data.update(params, function(serr, sres) {
        next(serr, idata);
      });
    }
  });
}

exports.BuyCartItems = function(username, next) {
  var tname = "cart";
  var fname = "values";
  var params = {TableName : tname,
                Key       : {username : username}};
  Data.get(params, function(gerr, data) {
    if (gerr) next(gerr, null);
    else {
      if (!data.Item) next(null, null);
      else {
        var cdata = data.Item;
        var imap  = exports.Clone(cdata[fname]);
        var items = [];
        for (var pname in imap) {
          var pdata = imap[pname];
          items.push(pdata);
        }
        add_items_to_purchase(username, items, function(serr, idata) {
          if (serr) next(serr, null);
          else {
            buy_items(username, items, function(serr, sres) {
              if (serr) next(serr, null);
              else {
                var updates = [];
                updates.push({operation : "SET", values : [fname, {}]});
                var params  = {TableName : tname,
                               Key       : {username : username},
                               Updates   : updates};
                Data.update(params, function(serr, sres) {
                  next(serr, idata);
                });
              }
            });
          }
        });
      }
    }
  });
}

exports.BuyProduct = function(username, pdata, next) {
  var items = [pdata];
  add_items_to_purchase(username, items, function(serr, idata) {
    if (serr) next(serr, null);
    else {
      buy_items(username, items, next);
    }
  });
}

exports.CheckProduct = function(pid, next) {
  var tname  = 'products';
  var params = {TableName : tname,
                Key       : {id : pid}};
  Data.get(params, function(gerr, data) {
    if (gerr) next(gerr, null);
    else {
      if (!data.Item) next(new Error(Errors.Message.ProductNotFound), null);
      else            next(null, data.Item);
    }
  });
}

function handle_redirect(sid, ts, pid, is_fav, is_cart, next) {
  var event  = {headers               : {Host       : host},
                queryStringParameters : {session    : sid,
                                         ts         : ts,
                                         product_id : pid,
                                         add        : "true"
                }
               };
  exports.EditMemberMetric(event, is_fav, is_cart, next);
}

exports.HandleLogin = function(sid, host, ts, username, redir, pname, next) {
  var is_fav   = redir  && (redir === 'FAVORITE');
  var is_cart  = redir  && (redir === 'CART');
  var is_redir = is_fav || is_cart;
  if (!is_redir) {
    Response.MemberHome(sid, host, ts, username, next);
  } else {
    exports.CheckProduct(pid, function(cerr, pdata) {
      if (cerr) next(cerr, null);
      else {
        var pid = pdata.id;
        handle_redirect(sid, host, ts, pid, is_fav, is_cart, next);
      }
    });
  }
}

